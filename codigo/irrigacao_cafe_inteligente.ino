/*
 * SISTEMA DE IRRIGA√á√ÉO INTELIGENTE PARA CAF√â - VERS√ÉO COM PREVIS√ÉO CLIM√ÅTICA
 * Autor: Jefferson de Souza Oliveira - RM568138
 * Curso: Intelig√™ncia Artificial - FIAP Fase 2
 * Empresa Fict√≠cia: FarmTech Solutions
 *
 * DESCRI√á√ÉO:
 * Sistema IoT que monitora condi√ß√µes do solo para cultivo de caf√© e
 * controla automaticamente a irriga√ß√£o baseado em:
 * - pH do solo (ideal: 5.5 a 6.5)
 * - Umidade do solo (ideal: 60% a 80%)
 * - N√≠veis de NPK (Nitrog√™nio, F√≥sforo, Pot√°ssio)
 * - PREVIS√ÉO CLIM√ÅTICA (probabilidade de chuva)
 *
 * NOVIDADE - INTEGRA√á√ÉO COM API METEOROL√ìGICA:
 * Este c√≥digo integra dados de previs√£o do tempo obtidos via Python
 * da API wttr.in para otimizar decis√µes de irriga√ß√£o e economizar √°gua.
 *
 * COMPONENTES:
 * - 3 Bot√µes: Simulam sensores de NPK
 * - 1 LDR: Simula sensor de pH (0-14)
 * - 1 DHT22: Simula sensor de umidade do solo (%)
 * - 1 Rel√©: Controla bomba d'√°gua
 */

#include <DHT.h>

// ========== DEFINI√á√ÉO DE PINOS ==========
#define PIN_BTN_N 12        // Bot√£o sensor Nitrog√™nio (GPIO 12)
#define PIN_BTN_P 14        // Bot√£o sensor F√≥sforo (GPIO 14)
#define PIN_BTN_K 27        // Bot√£o sensor Pot√°ssio (GPIO 27)
#define PIN_LDR 34          // LDR sensor pH (Anal√≥gico GPIO 34)
#define PIN_DHT 15          // DHT22 sensor umidade (GPIO 15)
#define PIN_RELE 26         // Rel√© bomba d'√°gua (GPIO 26)

// ========== PAR√ÇMETROS DO CAF√â ==========
#define PH_MIN 5.5          // pH m√≠nimo ideal para caf√©
#define PH_MAX 6.5          // pH m√°ximo ideal para caf√©
#define UMIDADE_MIN 60.0    // Umidade m√≠nima ideal (%)
#define UMIDADE_MAX 80.0    // Umidade m√°xima ideal (%)

// ========== DADOS METEOROL√ìGICOS (OBTIDOS VIA PYTHON API) ==========
// √öltima atualiza√ß√£o: 2025-10-11 23:10:21
// Fonte: wttr.in API
// Execute o script: python consulta_clima.py
#define PROBABILIDADE_CHUVA 0    // % (0-100)
#define PRECIPITACAO_MM 0.1      // mm
#define TEMP_ATUAL 18            // ¬∞C
#define UMIDADE_AR 94            // %

// L√≥gica de decis√£o clim√°tica
#define LIMITE_CHUVA_ALTA 70     // >= 70% = Desligar irriga√ß√£o
#define LIMITE_CHUVA_MODERADA 40 // >= 40% = Reduzir irriga√ß√£o

// ========== CONFIGURA√á√ÉO DHT ==========
#define DHTTYPE DHT22
DHT dht(PIN_DHT, DHTTYPE);

// ========== VARI√ÅVEIS GLOBAIS ==========
bool nitrogenio_ok = false;
bool fosforo_ok = false;
bool potassio_ok = false;
float ph_solo = 0.0;
float umidade_solo = 0.0;
bool bomba_ligada = false;

// ========== SETUP ==========
void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("============================================");
  Serial.println("SISTEMA DE IRRIGA√á√ÉO INTELIGENTE - CAF√â");
  Serial.println("VERS√ÉO COM PREVIS√ÉO CLIM√ÅTICA");
  Serial.println("FarmTech Solutions");
  Serial.println("============================================\n");

  // Configurar pinos de entrada
  pinMode(PIN_BTN_N, INPUT_PULLUP);
  pinMode(PIN_BTN_P, INPUT_PULLUP);
  pinMode(PIN_BTN_K, INPUT_PULLUP);
  pinMode(PIN_LDR, INPUT);

  // Configurar pino de sa√≠da
  pinMode(PIN_RELE, OUTPUT);
  digitalWrite(PIN_RELE, LOW); // Bomba inicialmente desligada

  // Inicializar DHT22
  dht.begin();

  Serial.println("Sistema inicializado com sucesso!");
  Serial.println("Monitorando condi√ß√µes do solo...");

  // Exibir dados meteorol√≥gicos carregados
  exibirDadosMeteorologicos();

  Serial.println();
  delay(2000);
}

// ========== LOOP PRINCIPAL ==========
void loop() {
  // Ler sensores
  lerSensoresNPK();
  lerSensorPH();
  lerSensorUmidade();

  // Exibir leituras no monitor serial
  exibirLeituras();

  // Avaliar condi√ß√µes e controlar irriga√ß√£o (COM PREVIS√ÉO CLIM√ÅTICA)
  controlarIrrigacaoInteligente();

  // Aguardar antes da pr√≥xima leitura
  delay(3000);
  Serial.println("----------------------------------------\n");
}

// ========== FUN√á√ÉO: EXIBIR DADOS METEOROL√ìGICOS ==========
void exibirDadosMeteorologicos() {
  Serial.println("\n========== DADOS METEOROL√ìGICOS ==========");
  Serial.print("Temperatura Atual: ");
  Serial.print(TEMP_ATUAL);
  Serial.println("¬∞C");

  Serial.print("Umidade do Ar: ");
  Serial.print(UMIDADE_AR);
  Serial.println("%");

  Serial.print("Precipita√ß√£o: ");
  Serial.print(PRECIPITACAO_MM);
  Serial.println(" mm");

  Serial.print("Probabilidade de Chuva: ");
  Serial.print(PROBABILIDADE_CHUVA);
  Serial.println("%");

  if (PROBABILIDADE_CHUVA >= LIMITE_CHUVA_ALTA) {
    Serial.println("‚ö†Ô∏è  ALERTA: Alta probabilidade de chuva!");
    Serial.println("    Sistema economizar√° √°gua automaticamente");
  } else if (PROBABILIDADE_CHUVA >= LIMITE_CHUVA_MODERADA) {
    Serial.println("‚ö†Ô∏è  ATEN√á√ÉO: Possibilidade de chuva");
    Serial.println("    Sistema ajustar√° irriga√ß√£o");
  } else {
    Serial.println("‚úì Condi√ß√µes clim√°ticas favor√°veis");
  }

  Serial.println("==========================================");
}

// ========== FUN√á√ÉO: LER SENSORES NPK ==========
void lerSensoresNPK() {
  // Bot√µes pressionados = LOW (INPUT_PULLUP invertido)
  // Bot√£o pressionado = Nutriente PRESENTE (OK)
  nitrogenio_ok = (digitalRead(PIN_BTN_N) == LOW);
  fosforo_ok = (digitalRead(PIN_BTN_P) == LOW);
  potassio_ok = (digitalRead(PIN_BTN_K) == LOW);
}

// ========== FUN√á√ÉO: LER SENSOR pH ==========
void lerSensorPH() {
  // LDR retorna valor anal√≥gico (0-4095 no ESP32)
  // Converter para escala de pH (0-14)
  int leitura_ldr = analogRead(PIN_LDR);

  // Mapear 0-4095 para 0-14 (escala de pH)
  ph_solo = map(leitura_ldr, 0, 4095, 0, 140) / 10.0;

  // Garantir que pH fique entre 0 e 14
  if (ph_solo < 0) ph_solo = 0;
  if (ph_solo > 14) ph_solo = 14;
}

// ========== FUN√á√ÉO: LER SENSOR UMIDADE ==========
void lerSensorUmidade() {
  // DHT22 retorna umidade relativa do ar
  // Estamos simulando como umidade do solo
  umidade_solo = dht.readHumidity();

  // Verificar se leitura √© v√°lida
  if (isnan(umidade_solo)) {
    Serial.println("ERRO: Falha ao ler DHT22!");
    umidade_solo = 0.0;
  }
}

// ========== FUN√á√ÉO: EXIBIR LEITURAS ==========
void exibirLeituras() {
  Serial.println("========== LEITURAS DOS SENSORES ==========");

  // Status NPK
  Serial.print("Nitrog√™nio (N): ");
  Serial.println(nitrogenio_ok ? "‚úì OK" : "‚úó BAIXO");

  Serial.print("F√≥sforo (P):    ");
  Serial.println(fosforo_ok ? "‚úì OK" : "‚úó BAIXO");

  Serial.print("Pot√°ssio (K):   ");
  Serial.println(potassio_ok ? "‚úì OK" : "‚úó BAIXO");

  // pH do solo
  Serial.print("pH do Solo:     ");
  Serial.print(ph_solo, 1);

  if (ph_solo >= PH_MIN && ph_solo <= PH_MAX) {
    Serial.println(" ‚úì IDEAL");
  } else if (ph_solo < PH_MIN) {
    Serial.println(" ‚úó MUITO √ÅCIDO");
  } else {
    Serial.println(" ‚úó MUITO ALCALINO");
  }

  // Umidade do solo
  Serial.print("Umidade:        ");
  Serial.print(umidade_solo, 1);
  Serial.print("%");

  if (umidade_solo >= UMIDADE_MIN && umidade_solo <= UMIDADE_MAX) {
    Serial.println(" ‚úì IDEAL");
  } else if (umidade_solo < UMIDADE_MIN) {
    Serial.println(" ‚úó SOLO SECO");
  } else {
    Serial.println(" ‚úó SOLO ENCHARCADO");
  }

  Serial.println();
}

// ========== FUN√á√ÉO: CONTROLAR IRRIGA√á√ÉO INTELIGENTE ==========
void controlarIrrigacaoInteligente() {
  Serial.println("========== AN√ÅLISE E DECIS√ÉO INTELIGENTE ==========");

  // Verificar se todos os nutrientes est√£o OK
  bool npk_ok = nitrogenio_ok && fosforo_ok && potassio_ok;

  // Verificar se pH est√° no range ideal
  bool ph_ok = (ph_solo >= PH_MIN && ph_solo <= PH_MAX);

  // Verificar condi√ß√µes de umidade
  bool solo_seco = (umidade_solo < UMIDADE_MIN);
  bool solo_encharcado = (umidade_solo > UMIDADE_MAX);

  // ========== NOVA L√ìGICA: VERIFICAR PREVIS√ÉO CLIM√ÅTICA ==========
  bool chuva_alta = (PROBABILIDADE_CHUVA >= LIMITE_CHUVA_ALTA);
  bool chuva_moderada = (PROBABILIDADE_CHUVA >= LIMITE_CHUVA_MODERADA &&
                         PROBABILIDADE_CHUVA < LIMITE_CHUVA_ALTA);

  // L√ìGICA DE DECIS√ÉO INTELIGENTE:
  // 1. DESLIGAR bomba SE: chuva alta (>= 70%) - ECONOMIA DE √ÅGUA
  // 2. DESLIGAR bomba SE: solo encharcado OU condi√ß√µes n√£o ideais
  // 3. AVALIAR SE: chuva moderada (>= 40%) - pode ou n√£o ligar
  // 4. LIGAR bomba SE: solo seco E pH ideal E NPK OK E sem previs√£o de chuva

  bool deve_desligar = solo_encharcado || !ph_ok || !npk_ok || chuva_alta;
  bool deve_ligar = solo_seco && ph_ok && npk_ok && !chuva_alta && !chuva_moderada;

  // Exibir an√°lise
  Serial.print("NPK Completo: ");
  Serial.println(npk_ok ? "SIM ‚úì" : "N√ÉO ‚úó");

  Serial.print("pH Adequado:  ");
  Serial.println(ph_ok ? "SIM ‚úì" : "N√ÉO ‚úó");

  Serial.print("Solo Seco:    ");
  Serial.println(solo_seco ? "SIM" : "N√ÉO");

  Serial.print("Solo Encharcado: ");
  Serial.println(solo_encharcado ? "SIM" : "N√ÉO");

  Serial.print("Previs√£o Chuva: ");
  Serial.print(PROBABILIDADE_CHUVA);
  Serial.print("% ");
  if (chuva_alta) {
    Serial.println("(ALTA - ECONOMIA)");
  } else if (chuva_moderada) {
    Serial.println("(MODERADA - CAUTELA)");
  } else {
    Serial.println("(BAIXA)");
  }

  Serial.println();

  // ========== CONTROLAR BOMBA COM BASE EM AN√ÅLISE INTELIGENTE ==========
  if (chuva_alta && bomba_ligada) {
    // Caso especial: Se houver previs√£o de chuva alta, desligar mesmo que solo esteja seco
    desligarBomba();
    Serial.println("üí° ECONOMIA: Chuva prevista, desligando irriga√ß√£o");
  } else if (deve_ligar && !bomba_ligada) {
    ligarBomba();
  } else if (deve_desligar && bomba_ligada) {
    desligarBomba();
  } else if (chuva_moderada && solo_seco && bomba_ligada) {
    // Se j√° est√° ligada e h√° chuva moderada, manter mas avisar
    Serial.println("‚ö° BOMBA: LIGADA (mas ser√° desligada se chover)");
  } else if (bomba_ligada) {
    Serial.println("‚ö° BOMBA: LIGADA (mantendo irriga√ß√£o)");
  } else {
    Serial.println("‚≠ï BOMBA: DESLIGADA");
    if (chuva_moderada && solo_seco) {
      Serial.println("üí° ATEN√á√ÉO: Solo seco mas h√° possibilidade de chuva");
    }
  }

  // Exibir recomenda√ß√µes se necess√°rio
  exibirRecomendacoes(npk_ok, ph_ok, solo_seco, solo_encharcado, chuva_alta, chuva_moderada);
}

// ========== FUN√á√ÉO: LIGAR BOMBA ==========
void ligarBomba() {
  digitalWrite(PIN_RELE, HIGH);
  bomba_ligada = true;
  Serial.println("üö® A√á√ÉO: LIGANDO BOMBA D'√ÅGUA!");
  Serial.println("‚ö° BOMBA: LIGADA (iniciando irriga√ß√£o)");
}

// ========== FUN√á√ÉO: DESLIGAR BOMBA ==========
void desligarBomba() {
  digitalWrite(PIN_RELE, LOW);
  bomba_ligada = false;
  Serial.println("üö® A√á√ÉO: DESLIGANDO BOMBA D'√ÅGUA!");
  Serial.println("‚≠ï BOMBA: DESLIGADA");
}

// ========== FUN√á√ÉO: EXIBIR RECOMENDA√á√ïES ==========
void exibirRecomendacoes(bool npk_ok, bool ph_ok, bool solo_seco, bool solo_encharcado,
                         bool chuva_alta, bool chuva_moderada) {
  bool tem_problema = !npk_ok || !ph_ok || solo_encharcado || chuva_alta;

  if (tem_problema || chuva_moderada) {
    Serial.println("\n‚ö†Ô∏è  RECOMENDA√á√ïES:");

    if (chuva_alta) {
      Serial.println("   üåßÔ∏è  Chuva prevista - Irriga√ß√£o desligada automaticamente");
      Serial.println("   üí∞ ECONOMIA DE √ÅGUA estimada: 100-300 litros");
    }

    if (chuva_moderada && !chuva_alta) {
      Serial.println("   üå¶Ô∏è  Possibilidade de chuva - Monitorar clima");
      Serial.println("   üí° Se chover, sistema economizar√° √°gua");
    }

    if (!npk_ok) {
      if (!nitrogenio_ok) Serial.println("   - Aplicar fertilizante nitrogenado");
      if (!fosforo_ok) Serial.println("   - Aplicar fertilizante fosfatado");
      if (!potassio_ok) Serial.println("   - Aplicar fertilizante pot√°ssico");
    }

    if (!ph_ok && !chuva_alta) {
      if (ph_solo < PH_MIN) {
        Serial.println("   - Solo muito √°cido: aplicar calc√°rio");
      } else {
        Serial.println("   - Solo muito alcalino: aplicar enxofre");
      }
    }

    if (solo_encharcado) {
      Serial.println("   - Melhorar drenagem do solo");
      Serial.println("   - Reduzir frequ√™ncia de irriga√ß√£o");
    }
  }
}
